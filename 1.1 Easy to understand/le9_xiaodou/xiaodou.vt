// Copyright (C) 1991-2011 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "11/03/2016 13:27:25"
                                                                                
// Verilog Test Bench template for design : xiaodou
// 
// Simulation tool : ModelSim (Verilog)
// 

`timescale 1 ns/ 1 ps
module xiaodou_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg clk;
reg keyUp;
reg rst_n;
// wires                                               
wire led0;

// assign statements (if any)                          
xiaodou i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.keyUp(keyUp),
	.led0(led0),
	.rst_n(rst_n)
);
//定义时钟周期为20ns
parameter PERIOD = 20;

//clk,50MHz
always begin                                                  
    #PERIOD clk = 0;
    #PERIOD clk = 1;
end   


//复位                                                
initial begin 

    # PERIOD rst_n = 0;    
    #(PERIOD*20000) rst_n = 1;
    $stop;
end


//keyUp，按下 
initial begin 
	 #(PERIOD*600) keyUp = 0; 
    #(PERIOD*2) keyUp = 0; 
	 #(PERIOD*2) keyUp = 1;	 	 
	 #(PERIOD*2) keyUp = 0;	 
	 #(PERIOD*2) keyUp = 1;	
	 #(PERIOD*2) keyUp = 1;	
	 #(PERIOD*2) keyUp = 1;	 	 
	 #(PERIOD*2) keyUp = 0;
	 #(PERIOD*2) keyUp = 1;	
	 #(PERIOD*2) keyUp = 1;	 	 
	 #(PERIOD*2) keyUp = 0;	 	 
	 #(PERIOD*1200) keyUp = 1;
	  #(PERIOD*2) keyUp = 1;	 	 
	 #(PERIOD*2) keyUp = 0;	 
	 #(PERIOD*2) keyUp = 1;	
	 #(PERIOD*2) keyUp = 1;	
	 #(PERIOD*2) keyUp = 1;	 	 
	 #(PERIOD*2) keyUp = 0;
	 #(PERIOD*2) keyUp = 1;	
	 	 #(PERIOD*2) keyUp = 1;	 	 
	 #(PERIOD*2) keyUp = 0;	 	 	 	 
    #10000 keyUp = 1;
	 	 
    $stop;
end
                                                 
endmodule

